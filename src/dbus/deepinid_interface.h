/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c deepinid -p generated/com_deepin_deepinid /home/iceyer/Develop/deepin/dde-qt-dbus-factory/xml/com.deepin.deepinid.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COM_DEEPIN_DEEPINID_H
#define COM_DEEPIN_DEEPINID_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


typedef QVariantMap DVariantMap;
/*
 * Proxy class for interface com.deepin.deepinid
 */
class __deepinidPrivate;
class __deepinid : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.deepinid"; }

public:
    explicit __deepinid(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__deepinid();

    Q_PROPERTY(QString HardwareID READ hardwareID NOTIFY HardwareIDChanged)
    QString hardwareID();

    Q_PROPERTY(QString MachineName READ machineName NOTIFY MachineNameChanged)
    QString machineName();

    Q_PROPERTY(DVariantMap UserInfo READ userInfo NOTIFY UserInfoChanged)
    DVariantMap userInfo();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> GetToken()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetToken"), argumentList);
    }



    inline QDBusPendingReply<> Login()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Login"), argumentList);
    }

    inline void LoginQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Login"), argumentList);
    }


    inline QDBusPendingReply<> Logout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Logout"), argumentList);
    }

    inline void LogoutQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Logout"), argumentList);
    }


    inline QDBusPendingReply<> SetToken(DVariantMap in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetToken"), argumentList);
    }

    inline void SetTokenQueued(DVariantMap in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("SetToken"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    // begin property changed signals
    void HardwareIDChanged(const QString & value) const;
    void MachineNameChanged(const QString & value) const;
    void UserInfoChanged(DVariantMap  value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __deepinidPrivate *d_ptr;
};

namespace com {
  namespace deepin {
    typedef ::__deepinid deepinid;
  }
}
#endif
